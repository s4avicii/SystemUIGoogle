package com.android.systemui;

import android.app.ActivityThread;
import android.app.AlarmManager;
import android.app.INotificationManager;
import android.app.IWallpaperManager;
import android.content.Context;
import android.content.res.AssetManager;
import android.hardware.SensorPrivacyManager;
import android.hardware.display.NightDisplayListener;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Looper;
import android.os.Process;
import android.util.ArrayMap;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.IWindowManager;
import androidx.coordinatorlayout.R$styleable;
import com.android.internal.annotations.VisibleForTesting;
import com.android.internal.logging.MetricsLogger;
import com.android.internal.logging.UiEventLogger;
import com.android.internal.statusbar.IStatusBarService;
import com.android.keyguard.KeyguardSecurityModel;
import com.android.keyguard.KeyguardUpdateMonitor;
import com.android.keyguard.clock.ClockManager;
import com.android.p012wm.shell.C1777R;
import com.android.p012wm.shell.transition.ShellTransitions;
import com.android.settingslib.bluetooth.LocalBluetoothManager;
import com.android.systemui.Dependency;
import com.android.systemui.accessibility.AccessibilityButtonModeObserver;
import com.android.systemui.accessibility.AccessibilityButtonTargetsObserver;
import com.android.systemui.accessibility.floatingmenu.AccessibilityFloatingMenuController;
import com.android.systemui.appops.AppOpsController;
import com.android.systemui.assist.AssistManager;
import com.android.systemui.broadcast.BroadcastDispatcher;
import com.android.systemui.colorextraction.SysuiColorExtractor;
import com.android.systemui.dagger.DaggerGlobalRootComponent;
import com.android.systemui.dagger.GlobalRootComponent;
import com.android.systemui.dagger.SysUIComponent;
import com.android.systemui.dagger.WMComponent;
import com.android.systemui.dock.DockManager;
import com.android.systemui.flags.FeatureFlags;
import com.android.systemui.fragments.FragmentService;
import com.android.systemui.keyguard.ScreenLifecycle;
import com.android.systemui.keyguard.WakefulnessLifecycle;
import com.android.systemui.media.dialog.MediaOutputDialogFactory;
import com.android.systemui.model.SysUiState;
import com.android.systemui.navigationbar.NavigationBarController;
import com.android.systemui.navigationbar.NavigationBarOverlayController;
import com.android.systemui.navigationbar.NavigationModeController;
import com.android.systemui.navigationbar.gestural.EdgeBackGestureHandler;
import com.android.systemui.p006qs.ReduceBrightColorsController;
import com.android.systemui.p006qs.tiles.dialog.InternetDialogFactory;
import com.android.systemui.plugins.ActivityStarter;
import com.android.systemui.plugins.DarkIconDispatcher;
import com.android.systemui.plugins.PluginDependencyProvider;
import com.android.systemui.plugins.VolumeDialogController;
import com.android.systemui.plugins.statusbar.StatusBarStateController;
import com.android.systemui.power.EnhancedEstimates;
import com.android.systemui.power.PowerUI;
import com.android.systemui.privacy.PrivacyItemController;
import com.android.systemui.recents.OverviewProxyService;
import com.android.systemui.screenrecord.RecordingController;
import com.android.systemui.screenshot.ScreenshotNotificationSmartActionsProvider;
import com.android.systemui.shared.plugins.PluginManager;
import com.android.systemui.shared.system.ActivityManagerWrapper;
import com.android.systemui.shared.system.DevicePolicyManagerWrapper;
import com.android.systemui.shared.system.PackageManagerWrapper;
import com.android.systemui.statusbar.CommandQueue;
import com.android.systemui.statusbar.NotificationListener;
import com.android.systemui.statusbar.NotificationLockscreenUserManager;
import com.android.systemui.statusbar.NotificationMediaManager;
import com.android.systemui.statusbar.NotificationRemoteInputManager;
import com.android.systemui.statusbar.NotificationShadeWindowController;
import com.android.systemui.statusbar.NotificationViewHierarchyManager;
import com.android.systemui.statusbar.SmartReplyController;
import com.android.systemui.statusbar.VibratorHelper;
import com.android.systemui.statusbar.events.PrivacyDotViewController;
import com.android.systemui.statusbar.events.SystemStatusAnimationScheduler;
import com.android.systemui.statusbar.notification.NotificationEntryManager;
import com.android.systemui.statusbar.notification.NotificationFilter;
import com.android.systemui.statusbar.notification.collection.legacy.NotificationGroupManagerLegacy;
import com.android.systemui.statusbar.notification.collection.legacy.VisualStabilityManager;
import com.android.systemui.statusbar.notification.collection.render.GroupExpansionManager;
import com.android.systemui.statusbar.notification.collection.render.GroupMembershipManager;
import com.android.systemui.statusbar.notification.logging.NotificationLogger;
import com.android.systemui.statusbar.notification.row.NotificationGutsManager;
import com.android.systemui.statusbar.notification.stack.AmbientState;
import com.android.systemui.statusbar.notification.stack.NotificationSectionsManager;
import com.android.systemui.statusbar.phone.AutoHideController;
import com.android.systemui.statusbar.phone.DozeParameters;
import com.android.systemui.statusbar.phone.KeyguardDismissUtil;
import com.android.systemui.statusbar.phone.LightBarController;
import com.android.systemui.statusbar.phone.LockscreenGestureLogger;
import com.android.systemui.statusbar.phone.ManagedProfileController;
import com.android.systemui.statusbar.phone.NotificationGroupAlertTransferHelper;
import com.android.systemui.statusbar.phone.ScreenOffAnimationController;
import com.android.systemui.statusbar.phone.ShadeController;
import com.android.systemui.statusbar.phone.StatusBarContentInsetsProvider;
import com.android.systemui.statusbar.phone.StatusBarIconController;
import com.android.systemui.statusbar.policy.AccessibilityController;
import com.android.systemui.statusbar.policy.AccessibilityManagerWrapper;
import com.android.systemui.statusbar.policy.BatteryController;
import com.android.systemui.statusbar.policy.BluetoothController;
import com.android.systemui.statusbar.policy.CastController;
import com.android.systemui.statusbar.policy.ConfigurationController;
import com.android.systemui.statusbar.policy.DataSaverController;
import com.android.systemui.statusbar.policy.DeviceProvisionedController;
import com.android.systemui.statusbar.policy.ExtensionController;
import com.android.systemui.statusbar.policy.FlashlightController;
import com.android.systemui.statusbar.policy.HotspotController;
import com.android.systemui.statusbar.policy.KeyguardStateController;
import com.android.systemui.statusbar.policy.LocationController;
import com.android.systemui.statusbar.policy.NextAlarmController;
import com.android.systemui.statusbar.policy.RemoteInputQuickSettingsDisabler;
import com.android.systemui.statusbar.policy.RotationLockController;
import com.android.systemui.statusbar.policy.SecurityController;
import com.android.systemui.statusbar.policy.SensorPrivacyController;
import com.android.systemui.statusbar.policy.SmartReplyConstants;
import com.android.systemui.statusbar.policy.UserInfoController;
import com.android.systemui.statusbar.policy.UserSwitcherController;
import com.android.systemui.statusbar.policy.ZenModeController;
import com.android.systemui.statusbar.window.StatusBarWindowController;
import com.android.systemui.telephony.TelephonyListenerManager;
import com.android.systemui.tracing.ProtoTracer;
import com.android.systemui.tuner.TunablePadding;
import com.android.systemui.tuner.TunerService;
import com.android.systemui.util.DeviceConfigProxy;
import com.android.systemui.util.leak.GarbageMonitor;
import com.android.systemui.util.leak.LeakDetector;
import com.android.systemui.util.leak.LeakReporter;
import com.android.systemui.util.sensors.AsyncSensorManager;
import dagger.Lazy;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;

public class SystemUIFactory {
    public static SystemUIFactory mFactory;
    public boolean mInitializeComponents;
    public GlobalRootComponent mRootComponent;
    public SysUIComponent mSysUIComponent;
    public WMComponent mWMComponent;

    @VisibleForTesting
    public static void cleanup() {
        mFactory = null;
    }

    @VisibleForTesting
    public void init(Context context, boolean z) throws ExecutionException, InterruptedException {
        boolean z2;
        SysUIComponent.Builder builder;
        if (z || !Process.myUserHandle().isSystem() || !ActivityThread.currentProcessName().equals(ActivityThread.currentPackageName())) {
            z2 = false;
        } else {
            z2 = true;
        }
        this.mInitializeComponents = z2;
        GlobalRootComponent buildGlobalRootComponent = buildGlobalRootComponent(context);
        this.mRootComponent = buildGlobalRootComponent;
        WMComponent.Builder wMComponentBuilder = buildGlobalRootComponent.getWMComponentBuilder();
        if (!this.mInitializeComponents || !context.getResources().getBoolean(C1777R.bool.config_enableShellMainThread)) {
            this.mWMComponent = wMComponentBuilder.build();
        } else {
            HandlerThread handlerThread = new HandlerThread("wmshell.main", -4);
            handlerThread.start();
            if (!Handler.createAsync(handlerThread.getLooper()).runWithScissors(new SystemUIFactory$$ExternalSyntheticLambda0(this, wMComponentBuilder, handlerThread), 5000)) {
                Log.w("SystemUIFactory", "Failed to initialize WMComponent");
                throw new RuntimeException();
            }
        }
        if (this.mInitializeComponents) {
            this.mWMComponent.init();
        }
        SysUIComponent.Builder sysUIComponent = this.mRootComponent.getSysUIComponent();
        if (this.mInitializeComponents) {
            builder = sysUIComponent.setPip(this.mWMComponent.getPip()).setLegacySplitScreen(this.mWMComponent.getLegacySplitScreen()).setSplitScreen(this.mWMComponent.getSplitScreen()).setOneHanded(this.mWMComponent.getOneHanded()).setBubbles(this.mWMComponent.getBubbles()).setHideDisplayCutout(this.mWMComponent.getHideDisplayCutout()).setShellCommandHandler(this.mWMComponent.getShellCommandHandler()).setAppPairs(this.mWMComponent.getAppPairs()).setTaskViewFactory(this.mWMComponent.getTaskViewFactory()).setTransitions(this.mWMComponent.getTransitions()).setStartingSurface(this.mWMComponent.getStartingSurface()).setDisplayAreaHelper(this.mWMComponent.getDisplayAreaHelper()).setTaskSurfaceHelper(this.mWMComponent.getTaskSurfaceHelper()).setRecentTasks(this.mWMComponent.getRecentTasks()).setCompatUI(this.mWMComponent.getCompatUI()).setDragAndDrop(this.mWMComponent.getDragAndDrop()).setBackAnimation(this.mWMComponent.getBackAnimation());
        } else {
            builder = sysUIComponent.setPip(Optional.ofNullable((Object) null)).setLegacySplitScreen(Optional.ofNullable((Object) null)).setSplitScreen(Optional.ofNullable((Object) null)).setOneHanded(Optional.ofNullable((Object) null)).setBubbles(Optional.ofNullable((Object) null)).setHideDisplayCutout(Optional.ofNullable((Object) null)).setShellCommandHandler(Optional.ofNullable((Object) null)).setAppPairs(Optional.ofNullable((Object) null)).setTaskViewFactory(Optional.ofNullable((Object) null)).setTransitions(new ShellTransitions() {
            }).setDisplayAreaHelper(Optional.ofNullable((Object) null)).setStartingSurface(Optional.ofNullable((Object) null)).setTaskSurfaceHelper(Optional.ofNullable((Object) null)).setRecentTasks(Optional.ofNullable((Object) null)).setCompatUI(Optional.ofNullable((Object) null)).setDragAndDrop(Optional.ofNullable((Object) null)).setBackAnimation(Optional.ofNullable((Object) null));
        }
        SysUIComponent build = builder.build();
        this.mSysUIComponent = build;
        if (this.mInitializeComponents) {
            build.init();
        }
        Dependency createDependency = this.mSysUIComponent.createDependency();
        Objects.requireNonNull(createDependency);
        ArrayMap<Object, Dependency.LazyDependencyCreator> arrayMap = createDependency.mProviders;
        Dependency.DependencyKey<Handler> dependencyKey = Dependency.TIME_TICK_HANDLER;
        Lazy<Handler> lazy = createDependency.mTimeTickHandler;
        Objects.requireNonNull(lazy);
        arrayMap.put(dependencyKey, new Dependency$$ExternalSyntheticLambda0(lazy, 0));
        ArrayMap<Object, Dependency.LazyDependencyCreator> arrayMap2 = createDependency.mProviders;
        Dependency.DependencyKey<Looper> dependencyKey2 = Dependency.BG_LOOPER;
        Lazy<Looper> lazy2 = createDependency.mBgLooper;
        Objects.requireNonNull(lazy2);
        arrayMap2.put(dependencyKey2, new Dependency$$ExternalSyntheticLambda12(lazy2, 0));
        ArrayMap<Object, Dependency.LazyDependencyCreator> arrayMap3 = createDependency.mProviders;
        Dependency.DependencyKey<Looper> dependencyKey3 = Dependency.MAIN_LOOPER;
        Lazy<Looper> lazy3 = createDependency.mMainLooper;
        Objects.requireNonNull(lazy3);
        arrayMap3.put(dependencyKey3, new Dependency$$ExternalSyntheticLambda12(lazy3, 0));
        ArrayMap<Object, Dependency.LazyDependencyCreator> arrayMap4 = createDependency.mProviders;
        Dependency.DependencyKey<Handler> dependencyKey4 = Dependency.MAIN_HANDLER;
        Lazy<Handler> lazy4 = createDependency.mMainHandler;
        Objects.requireNonNull(lazy4);
        arrayMap4.put(dependencyKey4, new Dependency$$ExternalSyntheticLambda12(lazy4, 0));
        ArrayMap<Object, Dependency.LazyDependencyCreator> arrayMap5 = createDependency.mProviders;
        Dependency.DependencyKey<Executor> dependencyKey5 = Dependency.MAIN_EXECUTOR;
        Lazy<Executor> lazy5 = createDependency.mMainExecutor;
        Objects.requireNonNull(lazy5);
        arrayMap5.put(dependencyKey5, new Dependency$$ExternalSyntheticLambda10(lazy5, 0));
        ArrayMap<Object, Dependency.LazyDependencyCreator> arrayMap6 = createDependency.mProviders;
        Dependency.DependencyKey<Executor> dependencyKey6 = Dependency.BACKGROUND_EXECUTOR;
        Lazy<Executor> lazy6 = createDependency.mBackgroundExecutor;
        Objects.requireNonNull(lazy6);
        arrayMap6.put(dependencyKey6, new Dependency$$ExternalSyntheticLambda21(lazy6, 0));
        Lazy<ActivityStarter> lazy7 = createDependency.mActivityStarter;
        Objects.requireNonNull(lazy7);
        createDependency.mProviders.put(ActivityStarter.class, new Dependency$$ExternalSyntheticLambda26(lazy7, 0));
        Lazy<BroadcastDispatcher> lazy8 = createDependency.mBroadcastDispatcher;
        Objects.requireNonNull(lazy8);
        createDependency.mProviders.put(BroadcastDispatcher.class, new Dependency$$ExternalSyntheticLambda27(lazy8, 0));
        Lazy<AsyncSensorManager> lazy9 = createDependency.mAsyncSensorManager;
        Objects.requireNonNull(lazy9);
        createDependency.mProviders.put(AsyncSensorManager.class, new Dependency$$ExternalSyntheticLambda28(lazy9, 0));
        Lazy<BluetoothController> lazy10 = createDependency.mBluetoothController;
        Objects.requireNonNull(lazy10);
        createDependency.mProviders.put(BluetoothController.class, new Dependency$$ExternalSyntheticLambda7(lazy10, 0));
        Lazy<SensorPrivacyManager> lazy11 = createDependency.mSensorPrivacyManager;
        Objects.requireNonNull(lazy11);
        createDependency.mProviders.put(SensorPrivacyManager.class, new Dependency$$ExternalSyntheticLambda12(lazy11, 0));
        Lazy<LocationController> lazy12 = createDependency.mLocationController;
        Objects.requireNonNull(lazy12);
        createDependency.mProviders.put(LocationController.class, new Dependency$$ExternalSyntheticLambda12(lazy12, 0));
        Lazy<RotationLockController> lazy13 = createDependency.mRotationLockController;
        Objects.requireNonNull(lazy13);
        createDependency.mProviders.put(RotationLockController.class, new Dependency$$ExternalSyntheticLambda12(lazy13, 0));
        Lazy<ZenModeController> lazy14 = createDependency.mZenModeController;
        Objects.requireNonNull(lazy14);
        createDependency.mProviders.put(ZenModeController.class, new Dependency$$ExternalSyntheticLambda12(lazy14, 0));
        Lazy<HotspotController> lazy15 = createDependency.mHotspotController;
        Objects.requireNonNull(lazy15);
        createDependency.mProviders.put(HotspotController.class, new Dependency$$ExternalSyntheticLambda12(lazy15, 0));
        Lazy<CastController> lazy16 = createDependency.mCastController;
        Objects.requireNonNull(lazy16);
        createDependency.mProviders.put(CastController.class, new Dependency$$ExternalSyntheticLambda12(lazy16, 0));
        Lazy<FlashlightController> lazy17 = createDependency.mFlashlightController;
        Objects.requireNonNull(lazy17);
        createDependency.mProviders.put(FlashlightController.class, new Dependency$$ExternalSyntheticLambda12(lazy17, 0));
        Lazy<KeyguardStateController> lazy18 = createDependency.mKeyguardMonitor;
        Objects.requireNonNull(lazy18);
        createDependency.mProviders.put(KeyguardStateController.class, new Dependency$$ExternalSyntheticLambda26(lazy18, 1));
        Lazy<KeyguardUpdateMonitor> lazy19 = createDependency.mKeyguardUpdateMonitor;
        Objects.requireNonNull(lazy19);
        createDependency.mProviders.put(KeyguardUpdateMonitor.class, new Dependency$$ExternalSyntheticLambda12(lazy19, 0));
        Lazy<UserSwitcherController> lazy20 = createDependency.mUserSwitcherController;
        Objects.requireNonNull(lazy20);
        createDependency.mProviders.put(UserSwitcherController.class, new Dependency$$ExternalSyntheticLambda12(lazy20, 0));
        Lazy<UserInfoController> lazy21 = createDependency.mUserInfoController;
        Objects.requireNonNull(lazy21);
        createDependency.mProviders.put(UserInfoController.class, new Dependency$$ExternalSyntheticLambda12(lazy21, 0));
        Lazy<BatteryController> lazy22 = createDependency.mBatteryController;
        Objects.requireNonNull(lazy22);
        createDependency.mProviders.put(BatteryController.class, new Dependency$$ExternalSyntheticLambda12(lazy22, 0));
        Lazy<NightDisplayListener> lazy23 = createDependency.mNightDisplayListener;
        Objects.requireNonNull(lazy23);
        createDependency.mProviders.put(NightDisplayListener.class, new Dependency$$ExternalSyntheticLambda12(lazy23, 0));
        Lazy<ReduceBrightColorsController> lazy24 = createDependency.mReduceBrightColorsController;
        Objects.requireNonNull(lazy24);
        createDependency.mProviders.put(ReduceBrightColorsController.class, new Dependency$$ExternalSyntheticLambda12(lazy24, 0));
        Lazy<ManagedProfileController> lazy25 = createDependency.mManagedProfileController;
        Objects.requireNonNull(lazy25);
        createDependency.mProviders.put(ManagedProfileController.class, new Dependency$$ExternalSyntheticLambda12(lazy25, 0));
        Lazy<NextAlarmController> lazy26 = createDependency.mNextAlarmController;
        Objects.requireNonNull(lazy26);
        createDependency.mProviders.put(NextAlarmController.class, new Dependency$$ExternalSyntheticLambda12(lazy26, 0));
        Lazy<DataSaverController> lazy27 = createDependency.mDataSaverController;
        Objects.requireNonNull(lazy27);
        createDependency.mProviders.put(DataSaverController.class, new Dependency$$ExternalSyntheticLambda12(lazy27, 0));
        Lazy<AccessibilityController> lazy28 = createDependency.mAccessibilityController;
        Objects.requireNonNull(lazy28);
        createDependency.mProviders.put(AccessibilityController.class, new Dependency$$ExternalSyntheticLambda27(lazy28, 1));
        Lazy<DeviceProvisionedController> lazy29 = createDependency.mDeviceProvisionedController;
        Objects.requireNonNull(lazy29);
        createDependency.mProviders.put(DeviceProvisionedController.class, new Dependency$$ExternalSyntheticLambda12(lazy29, 0));
        Lazy<PluginManager> lazy30 = createDependency.mPluginManager;
        Objects.requireNonNull(lazy30);
        createDependency.mProviders.put(PluginManager.class, new Dependency$$ExternalSyntheticLambda12(lazy30, 0));
        Lazy<AssistManager> lazy31 = createDependency.mAssistManager;
        Objects.requireNonNull(lazy31);
        createDependency.mProviders.put(AssistManager.class, new Dependency$$ExternalSyntheticLambda12(lazy31, 0));
        Lazy<SecurityController> lazy32 = createDependency.mSecurityController;
        Objects.requireNonNull(lazy32);
        createDependency.mProviders.put(SecurityController.class, new Dependency$$ExternalSyntheticLambda12(lazy32, 0));
        Lazy<LeakDetector> lazy33 = createDependency.mLeakDetector;
        Objects.requireNonNull(lazy33);
        createDependency.mProviders.put(LeakDetector.class, new Dependency$$ExternalSyntheticLambda12(lazy33, 0));
        ArrayMap<Object, Dependency.LazyDependencyCreator> arrayMap7 = createDependency.mProviders;
        Dependency.DependencyKey<String> dependencyKey7 = Dependency.LEAK_REPORT_EMAIL;
        Lazy<String> lazy34 = createDependency.mLeakReportEmail;
        Objects.requireNonNull(lazy34);
        arrayMap7.put(dependencyKey7, new Dependency$$ExternalSyntheticLambda12(lazy34, 0));
        Lazy<LeakReporter> lazy35 = createDependency.mLeakReporter;
        Objects.requireNonNull(lazy35);
        createDependency.mProviders.put(LeakReporter.class, new Dependency$$ExternalSyntheticLambda12(lazy35, 0));
        Lazy<GarbageMonitor> lazy36 = createDependency.mGarbageMonitor;
        Objects.requireNonNull(lazy36);
        createDependency.mProviders.put(GarbageMonitor.class, new Dependency$$ExternalSyntheticLambda12(lazy36, 0));
        Lazy<TunerService> lazy37 = createDependency.mTunerService;
        Objects.requireNonNull(lazy37);
        createDependency.mProviders.put(TunerService.class, new Dependency$$ExternalSyntheticLambda12(lazy37, 0));
        Lazy<NotificationShadeWindowController> lazy38 = createDependency.mNotificationShadeWindowController;
        Objects.requireNonNull(lazy38);
        createDependency.mProviders.put(NotificationShadeWindowController.class, new Dependency$$ExternalSyntheticLambda28(lazy38, 1));
        Lazy<StatusBarWindowController> lazy39 = createDependency.mTempStatusBarWindowController;
        Objects.requireNonNull(lazy39);
        createDependency.mProviders.put(StatusBarWindowController.class, new Dependency$$ExternalSyntheticLambda12(lazy39, 0));
        Lazy<DarkIconDispatcher> lazy40 = createDependency.mDarkIconDispatcher;
        Objects.requireNonNull(lazy40);
        createDependency.mProviders.put(DarkIconDispatcher.class, new Dependency$$ExternalSyntheticLambda12(lazy40, 0));
        Lazy<ConfigurationController> lazy41 = createDependency.mConfigurationController;
        Objects.requireNonNull(lazy41);
        createDependency.mProviders.put(ConfigurationController.class, new Dependency$$ExternalSyntheticLambda0(lazy41, 1));
        Lazy<StatusBarIconController> lazy42 = createDependency.mStatusBarIconController;
        Objects.requireNonNull(lazy42);
        createDependency.mProviders.put(StatusBarIconController.class, new Dependency$$ExternalSyntheticLambda1(lazy42, 0));
        Lazy<ScreenLifecycle> lazy43 = createDependency.mScreenLifecycle;
        Objects.requireNonNull(lazy43);
        createDependency.mProviders.put(ScreenLifecycle.class, new Dependency$$ExternalSyntheticLambda2(lazy43, 0));
        Lazy<WakefulnessLifecycle> lazy44 = createDependency.mWakefulnessLifecycle;
        Objects.requireNonNull(lazy44);
        createDependency.mProviders.put(WakefulnessLifecycle.class, new Dependency$$ExternalSyntheticLambda3(lazy44, 0));
        Lazy<FragmentService> lazy45 = createDependency.mFragmentService;
        Objects.requireNonNull(lazy45);
        createDependency.mProviders.put(FragmentService.class, new Dependency$$ExternalSyntheticLambda4(lazy45, 0));
        Lazy<ExtensionController> lazy46 = createDependency.mExtensionController;
        Objects.requireNonNull(lazy46);
        createDependency.mProviders.put(ExtensionController.class, new Dependency$$ExternalSyntheticLambda5(lazy46, 0));
        Lazy<PluginDependencyProvider> lazy47 = createDependency.mPluginDependencyProvider;
        Objects.requireNonNull(lazy47);
        createDependency.mProviders.put(PluginDependencyProvider.class, new Dependency$$ExternalSyntheticLambda6(lazy47, 0));
        Lazy<LocalBluetoothManager> lazy48 = createDependency.mLocalBluetoothManager;
        Objects.requireNonNull(lazy48);
        createDependency.mProviders.put(LocalBluetoothManager.class, new Dependency$$ExternalSyntheticLambda7(lazy48, 2));
        Lazy<VolumeDialogController> lazy49 = createDependency.mVolumeDialogController;
        Objects.requireNonNull(lazy49);
        createDependency.mProviders.put(VolumeDialogController.class, new Dependency$$ExternalSyntheticLambda8(lazy49, 0));
        Lazy<MetricsLogger> lazy50 = createDependency.mMetricsLogger;
        Objects.requireNonNull(lazy50);
        createDependency.mProviders.put(MetricsLogger.class, new Dependency$$ExternalSyntheticLambda9(lazy50, 0));
        Lazy<AccessibilityManagerWrapper> lazy51 = createDependency.mAccessibilityManagerWrapper;
        Objects.requireNonNull(lazy51);
        createDependency.mProviders.put(AccessibilityManagerWrapper.class, new Dependency$$ExternalSyntheticLambda12(lazy51, 1));
        Lazy<SysuiColorExtractor> lazy52 = createDependency.mSysuiColorExtractor;
        Objects.requireNonNull(lazy52);
        createDependency.mProviders.put(SysuiColorExtractor.class, new Dependency$$ExternalSyntheticLambda11(lazy52, 0));
        Lazy<TunablePadding.TunablePaddingService> lazy53 = createDependency.mTunablePaddingService;
        Objects.requireNonNull(lazy53);
        createDependency.mProviders.put(TunablePadding.TunablePaddingService.class, new Dependency$$ExternalSyntheticLambda13(lazy53, 0));
        Lazy<ForegroundServiceController> lazy54 = createDependency.mForegroundServiceController;
        Objects.requireNonNull(lazy54);
        createDependency.mProviders.put(ForegroundServiceController.class, new Dependency$$ExternalSyntheticLambda14(lazy54, 0));
        Lazy<UiOffloadThread> lazy55 = createDependency.mUiOffloadThread;
        Objects.requireNonNull(lazy55);
        createDependency.mProviders.put(UiOffloadThread.class, new Dependency$$ExternalSyntheticLambda15(lazy55, 0));
        Lazy<PowerUI.WarningsUI> lazy56 = createDependency.mWarningsUI;
        Objects.requireNonNull(lazy56);
        createDependency.mProviders.put(PowerUI.WarningsUI.class, new Dependency$$ExternalSyntheticLambda16(lazy56, 0));
        Lazy<LightBarController> lazy57 = createDependency.mLightBarController;
        Objects.requireNonNull(lazy57);
        createDependency.mProviders.put(LightBarController.class, new Dependency$$ExternalSyntheticLambda17(lazy57, 0));
        Lazy<IWindowManager> lazy58 = createDependency.mIWindowManager;
        Objects.requireNonNull(lazy58);
        createDependency.mProviders.put(IWindowManager.class, new Dependency$$ExternalSyntheticLambda18(lazy58, 0));
        Lazy<OverviewProxyService> lazy59 = createDependency.mOverviewProxyService;
        Objects.requireNonNull(lazy59);
        createDependency.mProviders.put(OverviewProxyService.class, new Dependency$$ExternalSyntheticLambda19(lazy59, 0));
        Lazy<NavigationModeController> lazy60 = createDependency.mNavBarModeController;
        Objects.requireNonNull(lazy60);
        createDependency.mProviders.put(NavigationModeController.class, new Dependency$$ExternalSyntheticLambda20(lazy60, 0));
        Lazy<AccessibilityButtonModeObserver> lazy61 = createDependency.mAccessibilityButtonModeObserver;
        Objects.requireNonNull(lazy61);
        createDependency.mProviders.put(AccessibilityButtonModeObserver.class, new Dependency$$ExternalSyntheticLambda12(lazy61, 1));
        Lazy<AccessibilityButtonTargetsObserver> lazy62 = createDependency.mAccessibilityButtonListController;
        Objects.requireNonNull(lazy62);
        createDependency.mProviders.put(AccessibilityButtonTargetsObserver.class, new Dependency$$ExternalSyntheticLambda22(lazy62, 0));
        Lazy<EnhancedEstimates> lazy63 = createDependency.mEnhancedEstimates;
        Objects.requireNonNull(lazy63);
        createDependency.mProviders.put(EnhancedEstimates.class, new Dependency$$ExternalSyntheticLambda23(lazy63, 0));
        Lazy<VibratorHelper> lazy64 = createDependency.mVibratorHelper;
        Objects.requireNonNull(lazy64);
        createDependency.mProviders.put(VibratorHelper.class, new Dependency$$ExternalSyntheticLambda24(lazy64, 0));
        Lazy<IStatusBarService> lazy65 = createDependency.mIStatusBarService;
        Objects.requireNonNull(lazy65);
        createDependency.mProviders.put(IStatusBarService.class, new Dependency$$ExternalSyntheticLambda25(lazy65, 0));
        Lazy<DisplayMetrics> lazy66 = createDependency.mDisplayMetrics;
        Objects.requireNonNull(lazy66);
        createDependency.mProviders.put(DisplayMetrics.class, new Dependency$$ExternalSyntheticLambda12(lazy66, 1));
        Lazy<LockscreenGestureLogger> lazy67 = createDependency.mLockscreenGestureLogger;
        Objects.requireNonNull(lazy67);
        createDependency.mProviders.put(LockscreenGestureLogger.class, new Dependency$$ExternalSyntheticLambda12(lazy67, 1));
        Lazy<NotificationEntryManager.KeyguardEnvironment> lazy68 = createDependency.mKeyguardEnvironment;
        Objects.requireNonNull(lazy68);
        createDependency.mProviders.put(NotificationEntryManager.KeyguardEnvironment.class, new Dependency$$ExternalSyntheticLambda12(lazy68, 1));
        Lazy<ShadeController> lazy69 = createDependency.mShadeController;
        Objects.requireNonNull(lazy69);
        createDependency.mProviders.put(ShadeController.class, new Dependency$$ExternalSyntheticLambda12(lazy69, 1));
        Lazy<NotificationRemoteInputManager.Callback> lazy70 = createDependency.mNotificationRemoteInputManagerCallback;
        Objects.requireNonNull(lazy70);
        createDependency.mProviders.put(NotificationRemoteInputManager.Callback.class, new Dependency$$ExternalSyntheticLambda12(lazy70, 1));
        Lazy<AppOpsController> lazy71 = createDependency.mAppOpsController;
        Objects.requireNonNull(lazy71);
        createDependency.mProviders.put(AppOpsController.class, new Dependency$$ExternalSyntheticLambda12(lazy71, 1));
        Lazy<NavigationBarController> lazy72 = createDependency.mNavigationBarController;
        Objects.requireNonNull(lazy72);
        createDependency.mProviders.put(NavigationBarController.class, new Dependency$$ExternalSyntheticLambda12(lazy72, 1));
        Lazy<AccessibilityFloatingMenuController> lazy73 = createDependency.mAccessibilityFloatingMenuController;
        Objects.requireNonNull(lazy73);
        createDependency.mProviders.put(AccessibilityFloatingMenuController.class, new Dependency$$ExternalSyntheticLambda12(lazy73, 1));
        Lazy<StatusBarStateController> lazy74 = createDependency.mStatusBarStateController;
        Objects.requireNonNull(lazy74);
        createDependency.mProviders.put(StatusBarStateController.class, new Dependency$$ExternalSyntheticLambda12(lazy74, 1));
        Lazy<NotificationLockscreenUserManager> lazy75 = createDependency.mNotificationLockscreenUserManager;
        Objects.requireNonNull(lazy75);
        createDependency.mProviders.put(NotificationLockscreenUserManager.class, new Dependency$$ExternalSyntheticLambda12(lazy75, 1));
        Lazy<VisualStabilityManager> lazy76 = createDependency.mVisualStabilityManager;
        Objects.requireNonNull(lazy76);
        createDependency.mProviders.put(VisualStabilityManager.class, new Dependency$$ExternalSyntheticLambda12(lazy76, 1));
        Lazy<NotificationGroupManagerLegacy> lazy77 = createDependency.mNotificationGroupManager;
        Objects.requireNonNull(lazy77);
        createDependency.mProviders.put(NotificationGroupManagerLegacy.class, new Dependency$$ExternalSyntheticLambda12(lazy77, 1));
        Lazy<NotificationGroupAlertTransferHelper> lazy78 = createDependency.mNotificationGroupAlertTransferHelper;
        Objects.requireNonNull(lazy78);
        createDependency.mProviders.put(NotificationGroupAlertTransferHelper.class, new Dependency$$ExternalSyntheticLambda12(lazy78, 1));
        Lazy<NotificationMediaManager> lazy79 = createDependency.mNotificationMediaManager;
        Objects.requireNonNull(lazy79);
        createDependency.mProviders.put(NotificationMediaManager.class, new Dependency$$ExternalSyntheticLambda12(lazy79, 1));
        Lazy<NotificationGutsManager> lazy80 = createDependency.mNotificationGutsManager;
        Objects.requireNonNull(lazy80);
        createDependency.mProviders.put(NotificationGutsManager.class, new Dependency$$ExternalSyntheticLambda12(lazy80, 1));
        Lazy<NotificationRemoteInputManager> lazy81 = createDependency.mNotificationRemoteInputManager;
        Objects.requireNonNull(lazy81);
        createDependency.mProviders.put(NotificationRemoteInputManager.class, new Dependency$$ExternalSyntheticLambda12(lazy81, 1));
        Lazy<SmartReplyConstants> lazy82 = createDependency.mSmartReplyConstants;
        Objects.requireNonNull(lazy82);
        createDependency.mProviders.put(SmartReplyConstants.class, new Dependency$$ExternalSyntheticLambda12(lazy82, 1));
        Lazy<NotificationListener> lazy83 = createDependency.mNotificationListener;
        Objects.requireNonNull(lazy83);
        createDependency.mProviders.put(NotificationListener.class, new Dependency$$ExternalSyntheticLambda12(lazy83, 1));
        Lazy<NotificationLogger> lazy84 = createDependency.mNotificationLogger;
        Objects.requireNonNull(lazy84);
        createDependency.mProviders.put(NotificationLogger.class, new Dependency$$ExternalSyntheticLambda12(lazy84, 1));
        Lazy<NotificationViewHierarchyManager> lazy85 = createDependency.mNotificationViewHierarchyManager;
        Objects.requireNonNull(lazy85);
        createDependency.mProviders.put(NotificationViewHierarchyManager.class, new Dependency$$ExternalSyntheticLambda12(lazy85, 1));
        Lazy<NotificationFilter> lazy86 = createDependency.mNotificationFilter;
        Objects.requireNonNull(lazy86);
        createDependency.mProviders.put(NotificationFilter.class, new Dependency$$ExternalSyntheticLambda12(lazy86, 1));
        Lazy<KeyguardDismissUtil> lazy87 = createDependency.mKeyguardDismissUtil;
        Objects.requireNonNull(lazy87);
        createDependency.mProviders.put(KeyguardDismissUtil.class, new Dependency$$ExternalSyntheticLambda12(lazy87, 1));
        Lazy<SmartReplyController> lazy88 = createDependency.mSmartReplyController;
        Objects.requireNonNull(lazy88);
        createDependency.mProviders.put(SmartReplyController.class, new Dependency$$ExternalSyntheticLambda12(lazy88, 1));
        Lazy<RemoteInputQuickSettingsDisabler> lazy89 = createDependency.mRemoteInputQuickSettingsDisabler;
        Objects.requireNonNull(lazy89);
        createDependency.mProviders.put(RemoteInputQuickSettingsDisabler.class, new Dependency$$ExternalSyntheticLambda12(lazy89, 1));
        Lazy<NotificationEntryManager> lazy90 = createDependency.mNotificationEntryManager;
        Objects.requireNonNull(lazy90);
        createDependency.mProviders.put(NotificationEntryManager.class, new Dependency$$ExternalSyntheticLambda12(lazy90, 1));
        Lazy<ForegroundServiceNotificationListener> lazy91 = createDependency.mForegroundServiceNotificationListener;
        Objects.requireNonNull(lazy91);
        createDependency.mProviders.put(ForegroundServiceNotificationListener.class, new Dependency$$ExternalSyntheticLambda12(lazy91, 1));
        Lazy<ClockManager> lazy92 = createDependency.mClockManager;
        Objects.requireNonNull(lazy92);
        createDependency.mProviders.put(ClockManager.class, new Dependency$$ExternalSyntheticLambda12(lazy92, 1));
        Lazy<PrivacyItemController> lazy93 = createDependency.mPrivacyItemController;
        Objects.requireNonNull(lazy93);
        createDependency.mProviders.put(PrivacyItemController.class, new Dependency$$ExternalSyntheticLambda12(lazy93, 1));
        Lazy<ActivityManagerWrapper> lazy94 = createDependency.mActivityManagerWrapper;
        Objects.requireNonNull(lazy94);
        createDependency.mProviders.put(ActivityManagerWrapper.class, new Dependency$$ExternalSyntheticLambda0(lazy94, 2));
        Lazy<DevicePolicyManagerWrapper> lazy95 = createDependency.mDevicePolicyManagerWrapper;
        Objects.requireNonNull(lazy95);
        createDependency.mProviders.put(DevicePolicyManagerWrapper.class, new Dependency$$ExternalSyntheticLambda1(lazy95, 2));
        Lazy<PackageManagerWrapper> lazy96 = createDependency.mPackageManagerWrapper;
        Objects.requireNonNull(lazy96);
        createDependency.mProviders.put(PackageManagerWrapper.class, new Dependency$$ExternalSyntheticLambda2(lazy96, 2));
        Lazy<SensorPrivacyController> lazy97 = createDependency.mSensorPrivacyController;
        Objects.requireNonNull(lazy97);
        createDependency.mProviders.put(SensorPrivacyController.class, new Dependency$$ExternalSyntheticLambda3(lazy97, 2));
        Lazy<DockManager> lazy98 = createDependency.mDockManager;
        Objects.requireNonNull(lazy98);
        createDependency.mProviders.put(DockManager.class, new Dependency$$ExternalSyntheticLambda4(lazy98, 2));
        Lazy<INotificationManager> lazy99 = createDependency.mINotificationManager;
        Objects.requireNonNull(lazy99);
        createDependency.mProviders.put(INotificationManager.class, new Dependency$$ExternalSyntheticLambda5(lazy99, 2));
        Lazy<SysUiState> lazy100 = createDependency.mSysUiStateFlagsContainer;
        Objects.requireNonNull(lazy100);
        createDependency.mProviders.put(SysUiState.class, new Dependency$$ExternalSyntheticLambda6(lazy100, 2));
        Lazy<AlarmManager> lazy101 = createDependency.mAlarmManager;
        Objects.requireNonNull(lazy101);
        createDependency.mProviders.put(AlarmManager.class, new Dependency$$ExternalSyntheticLambda1(lazy101, 1));
        Lazy<KeyguardSecurityModel> lazy102 = createDependency.mKeyguardSecurityModel;
        Objects.requireNonNull(lazy102);
        createDependency.mProviders.put(KeyguardSecurityModel.class, new Dependency$$ExternalSyntheticLambda2(lazy102, 1));
        Lazy<DozeParameters> lazy103 = createDependency.mDozeParameters;
        Objects.requireNonNull(lazy103);
        createDependency.mProviders.put(DozeParameters.class, new Dependency$$ExternalSyntheticLambda3(lazy103, 1));
        Lazy<IWallpaperManager> lazy104 = createDependency.mWallpaperManager;
        Objects.requireNonNull(lazy104);
        createDependency.mProviders.put(IWallpaperManager.class, new Dependency$$ExternalSyntheticLambda4(lazy104, 1));
        Lazy<CommandQueue> lazy105 = createDependency.mCommandQueue;
        Objects.requireNonNull(lazy105);
        createDependency.mProviders.put(CommandQueue.class, new Dependency$$ExternalSyntheticLambda5(lazy105, 1));
        Lazy<ProtoTracer> lazy106 = createDependency.mProtoTracer;
        Objects.requireNonNull(lazy106);
        createDependency.mProviders.put(ProtoTracer.class, new Dependency$$ExternalSyntheticLambda6(lazy106, 1));
        Lazy<DeviceConfigProxy> lazy107 = createDependency.mDeviceConfigProxy;
        Objects.requireNonNull(lazy107);
        createDependency.mProviders.put(DeviceConfigProxy.class, new Dependency$$ExternalSyntheticLambda7(lazy107, 1));
        Lazy<TelephonyListenerManager> lazy108 = createDependency.mTelephonyListenerManager;
        Objects.requireNonNull(lazy108);
        createDependency.mProviders.put(TelephonyListenerManager.class, new Dependency$$ExternalSyntheticLambda8(lazy108, 1));
        Lazy<AutoHideController> lazy109 = createDependency.mAutoHideController;
        Objects.requireNonNull(lazy109);
        createDependency.mProviders.put(AutoHideController.class, new Dependency$$ExternalSyntheticLambda9(lazy109, 1));
        Lazy<RecordingController> lazy110 = createDependency.mRecordingController;
        Objects.requireNonNull(lazy110);
        createDependency.mProviders.put(RecordingController.class, new Dependency$$ExternalSyntheticLambda10(lazy110, 1));
        Lazy<MediaOutputDialogFactory> lazy111 = createDependency.mMediaOutputDialogFactory;
        Objects.requireNonNull(lazy111);
        createDependency.mProviders.put(MediaOutputDialogFactory.class, new Dependency$$ExternalSyntheticLambda11(lazy111, 1));
        Lazy<NavigationBarOverlayController> lazy112 = createDependency.mNavbarButtonsControllerLazy;
        Objects.requireNonNull(lazy112);
        createDependency.mProviders.put(NavigationBarOverlayController.class, new Dependency$$ExternalSyntheticLambda13(lazy112, 1));
        Lazy<SystemStatusAnimationScheduler> lazy113 = createDependency.mSystemStatusAnimationSchedulerLazy;
        Objects.requireNonNull(lazy113);
        createDependency.mProviders.put(SystemStatusAnimationScheduler.class, new Dependency$$ExternalSyntheticLambda14(lazy113, 1));
        Lazy<PrivacyDotViewController> lazy114 = createDependency.mPrivacyDotViewControllerLazy;
        Objects.requireNonNull(lazy114);
        createDependency.mProviders.put(PrivacyDotViewController.class, new Dependency$$ExternalSyntheticLambda15(lazy114, 1));
        Lazy<InternetDialogFactory> lazy115 = createDependency.mInternetDialogFactory;
        Objects.requireNonNull(lazy115);
        createDependency.mProviders.put(InternetDialogFactory.class, new Dependency$$ExternalSyntheticLambda16(lazy115, 1));
        Lazy<EdgeBackGestureHandler.Factory> lazy116 = createDependency.mEdgeBackGestureHandlerFactoryLazy;
        Objects.requireNonNull(lazy116);
        createDependency.mProviders.put(EdgeBackGestureHandler.Factory.class, new Dependency$$ExternalSyntheticLambda17(lazy116, 1));
        Lazy<UiEventLogger> lazy117 = createDependency.mUiEventLogger;
        Objects.requireNonNull(lazy117);
        createDependency.mProviders.put(UiEventLogger.class, new Dependency$$ExternalSyntheticLambda18(lazy117, 1));
        Lazy<FeatureFlags> lazy118 = createDependency.mFeatureFlagsLazy;
        Objects.requireNonNull(lazy118);
        createDependency.mProviders.put(FeatureFlags.class, new Dependency$$ExternalSyntheticLambda19(lazy118, 1));
        Lazy<StatusBarContentInsetsProvider> lazy119 = createDependency.mContentInsetsProviderLazy;
        Objects.requireNonNull(lazy119);
        createDependency.mProviders.put(StatusBarContentInsetsProvider.class, new Dependency$$ExternalSyntheticLambda20(lazy119, 1));
        Lazy<NotificationSectionsManager> lazy120 = createDependency.mNotificationSectionsManagerLazy;
        Objects.requireNonNull(lazy120);
        createDependency.mProviders.put(NotificationSectionsManager.class, new Dependency$$ExternalSyntheticLambda21(lazy120, 1));
        Lazy<ScreenOffAnimationController> lazy121 = createDependency.mScreenOffAnimationController;
        Objects.requireNonNull(lazy121);
        createDependency.mProviders.put(ScreenOffAnimationController.class, new Dependency$$ExternalSyntheticLambda22(lazy121, 1));
        Lazy<AmbientState> lazy122 = createDependency.mAmbientStateLazy;
        Objects.requireNonNull(lazy122);
        createDependency.mProviders.put(AmbientState.class, new Dependency$$ExternalSyntheticLambda23(lazy122, 1));
        Lazy<GroupMembershipManager> lazy123 = createDependency.mGroupMembershipManagerLazy;
        Objects.requireNonNull(lazy123);
        createDependency.mProviders.put(GroupMembershipManager.class, new Dependency$$ExternalSyntheticLambda24(lazy123, 1));
        Lazy<GroupExpansionManager> lazy124 = createDependency.mGroupExpansionManagerLazy;
        Objects.requireNonNull(lazy124);
        createDependency.mProviders.put(GroupExpansionManager.class, new Dependency$$ExternalSyntheticLambda25(lazy124, 1));
        Dependency.setInstance(createDependency);
    }

    @VisibleForTesting
    public static void createFromConfig(Context context, boolean z) {
        if (mFactory == null) {
            String string = context.getString(C1777R.string.config_systemUIFactoryComponent);
            if (string == null || string.length() == 0) {
                throw new RuntimeException("No SystemUIFactory component configured");
            }
            try {
                SystemUIFactory systemUIFactory = (SystemUIFactory) context.getClassLoader().loadClass(string).newInstance();
                mFactory = systemUIFactory;
                systemUIFactory.init(context, z);
            } catch (Throwable th) {
                Log.w("SystemUIFactory", "Error creating SystemUIFactory component: " + string, th);
                throw new RuntimeException(th);
            }
        }
    }

    public R$styleable createBackGestureTfClassifierProvider(AssetManager assetManager, String str) {
        return new R$styleable();
    }

    public ScreenshotNotificationSmartActionsProvider createScreenshotNotificationSmartActionsProvider(Context context, Executor executor, Handler handler) {
        return new ScreenshotNotificationSmartActionsProvider();
    }

    public GlobalRootComponent buildGlobalRootComponent(Context context) {
        return DaggerGlobalRootComponent.builder().context(context).build();
    }
}
